// Generated by PMS #174
package waf

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafTest() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafTestRead,
		ReadContext: dataSourceWafTestRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"idxxxxxx": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `VPC ID, which can be used to filter VPCs.`,
			},
			"name": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `VPC name, which can be used to filter VPCs.`,
			},
			"description": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Supplementary information about the VPC, which can be used to filter VPCs.`,
			},
			"cidr": {
				Type:        schema.TypeList,
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `VPC CIDR block, which can be used to filter VPCs.`,
			},
			"vpcs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Response body of VPCs`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `ID of the project to which the VPC belongs`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the VPC is created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the VPC is updated.`,
						},
						"cloud_resources": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Type and number of resources associated with the VPC.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Resource type`,
									},
									"resource_count": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Number of resources`,
									},
								},
							},
						},
						"extend_cidrs": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Secondary CIDR blocks of VPCs.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `VPC status.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Provides supplementary information about the VPC.`,
						},
						"cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Available VPC CIDR blocks.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `ID of the enterprise project to which the VPC belongs.`,
						},
						"tags": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `VPC tags. For details, see the Tag objects.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `1. Tag value`,
									},
									"key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `1. Tag key.`,
									},
								},
							},
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `VPC ID, which uniquely identifies the VPC.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `VPC name.`,
						},
					},
				},
			},
			"page_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Pagination information`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"previous_marker": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `First record on the current page`,
						},
						"current_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Total number of records on the current page`,
						},
						"next_marker": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Last record on the current page. This parameter does not exist if the page is the last one.`,
						},
					},
				},
			},
		},
	}
}

type TestDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTestDSWrapper(d *schema.ResourceData, meta interface{}) *TestDSWrapper {
	return &TestDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafTestRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTestDSWrapper(d, meta)
	listVpcsRst, err := wrapper.ListVpcs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listVpcsToSchema(listVpcsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listTrafficMirrorFiltersToSchema()
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPC GET /v3/{project_id}/vpc/vpcs
func (w *TestDSWrapper) ListVpcs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/vpc/vpcs"
	params := map[string]any{
		"id":          w.ListToArray("idxxxxxx"),
		"name":        w.ListToArray("name"),
		"description": w.ListToArray("description"),
		"cidr":        w.ListToArray("cidr"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OkCode(200).
		Request().
		Result()
}

func (w *TestDSWrapper) listVpcsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("vpcs", schemas.SliceToList(body.Get("vpcs"),
			func(vpcs gjson.Result) any {
				return map[string]any{
					"project_id": vpcs.Get("project_id").Value(),
					"created_at": vpcs.Get("created_at").Value(),
					"updated_at": vpcs.Get("updated_at").Value(),
					"cloud_resources": schemas.SliceToList(vpcs.Get("cloud_resources"),
						func(cloudResources gjson.Result) any {
							return map[string]any{
								"resource_type":  cloudResources.Get("resource_type").Value(),
								"resource_count": cloudResources.Get("resource_count").Value(),
							}
						},
					),
					"extend_cidrs":          schemas.SliceToStrList(vpcs.Get("extend_cidrs")),
					"status":                vpcs.Get("status").Value(),
					"description":           vpcs.Get("description").Value(),
					"cidr":                  vpcs.Get("cidr").Value(),
					"enterprise_project_id": vpcs.Get("enterprise_project_id").Value(),
					"tags": schemas.SliceToList(vpcs.Get("tags"),
						func(tags gjson.Result) any {
							return map[string]any{
								"value": tags.Get("value").Value(),
								"key":   tags.Get("key").Value(),
							}
						},
					),
					"id":   vpcs.Get("id").Value(),
					"name": vpcs.Get("name").Value(),
				}
			},
		)),
		d.Set("page_info", schemas.ObjectToList(body.Get("page_info"),
			func(pageInfo gjson.Result) any {
				return map[string]any{
					"previous_marker": pageInfo.Get("previous_marker").Value(),
					"current_count":   pageInfo.Get("current_count").Value(),
					"next_marker":     pageInfo.Get("next_marker").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
