// Generated by PMS #120
package eip

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceEipTest() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceEipTestRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"eip_xxx_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Filter or sort by ID.`,
			},
			"protocol": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Filter by protocol.`,
			},
			"priority": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Filter by priority.`,
			},
			"traffic_mirror_filter_rules": {
				Type:        schema.TypeSet,
				Computed:    true,
				Description: `List of traffic mirror filter rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"direction": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic direction`,
						},
						"protocol": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Protocol of the mirrored traffic`,
						},
					},
				},
			},
		},
	}
}

type TestDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTestDSWrapper(d *schema.ResourceData, meta interface{}) *TestDSWrapper {
	return &TestDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceEipTestRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTestDSWrapper(d, meta)
	lisTraMirFilRulRst, err := wrapper.ListTrafficMirrorFilterRules()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listTrafficMirrorFilterRulesToSchema(lisTraMirFilRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API VPC GET /v3/{project_id}/vpc/traffic-mirror-filter-rules
func (w *TestDSWrapper) ListTrafficMirrorFilterRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/vpc/traffic-mirror-filter-rules"
	params := map[string]any{
		"id":       w.Get("eip_xxx_id"),
		"protocol": w.Get("protocol"),
		"priority": w.Get("priority"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Request().
		Result()
}

func (w *TestDSWrapper) listTrafficMirrorFilterRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("traffic_mirror_filter_rules", schemas.SliceToList(body.Get("traffic_mirror_filter_rules"),
			func(traMirFilRul gjson.Result) any {
				return map[string]any{
					"direction": traMirFilRul.Get("direction").Value(),
					"protocol":  traMirFilRul.Get("protocol").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
